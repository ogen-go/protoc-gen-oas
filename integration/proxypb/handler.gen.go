// Code generated by protoc-gen-oas, DO NOT EDIT.
package proxypb

import (
	"context"

	oas "github.com/ogen-go/protoc-gen-oas/integration/proxypb/oas"
)

// WrapperHandler is an oas.Handler implementation that maps request to gRPC server.
type WrapperHandler struct {
	APIService APIServiceServer
}

var _ oas.Handler = (*WrapperHandler)(nil)

// Echo maps request to APIService.Echo.
func (h *WrapperHandler) Echo(ctx context.Context, req oas.OptString) (resp *oas.StringMessage, _ error) {
	input := new(StringMessage)
	h.mapEchoBodyInput(input, req)
	output, err := h.APIService.Echo(ctx, input)
	if err != nil {
		return resp, err
	}
	return h.mapEchoOutput(output), nil
}

func (h *WrapperHandler) mapEchoBodyInput(pm *StringMessage, om oas.OptString) {
	if ogenVal, ok := om.Get(); ok {
		pm.Value = ogenVal
	}
}

func (h *WrapperHandler) mapEchoOutput(pm *StringMessage) (om *oas.StringMessage) {
	respVal := pm.ToOpenAPI()
	return &respVal
}

// PathParam maps request to APIService.PathParam.
func (h *WrapperHandler) PathParam(ctx context.Context, params oas.PathParamParams) (resp *oas.StringMessage, _ error) {
	input := new(StringMessage)
	h.mapPathParamParams(input, params)
	output, err := h.APIService.PathParam(ctx, input)
	if err != nil {
		return resp, err
	}
	return h.mapPathParamOutput(output), nil
}

func (h *WrapperHandler) mapPathParamParams(pm *StringMessage, om oas.PathParamParams) {
	pm.Value = om.Value
}

func (h *WrapperHandler) mapPathParamOutput(pm *StringMessage) (om *oas.StringMessage) {
	respVal := pm.ToOpenAPI()
	return &respVal
}

// TestModelEndpoint maps request to APIService.TestModelEndpoint.
func (h *WrapperHandler) TestModelEndpoint(ctx context.Context, req *oas.TestModel) (resp *oas.TestModel, _ error) {
	input := new(TestModel)
	h.mapTestModelEndpointBodyInput(input, req)
	output, err := h.APIService.TestModelEndpoint(ctx, input)
	if err != nil {
		return resp, err
	}
	return h.mapTestModelEndpointOutput(output), nil
}

func (h *WrapperHandler) mapTestModelEndpointBodyInput(pm *TestModel, om *oas.TestModel) {
	pm.FromOpenAPI(*om)
}

func (h *WrapperHandler) mapTestModelEndpointOutput(pm *TestModel) (om *oas.TestModel) {
	respVal := pm.ToOpenAPI()
	return &respVal
}
