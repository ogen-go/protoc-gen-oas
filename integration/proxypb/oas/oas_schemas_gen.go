// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/ChildModel1
type ChildModel1 struct {
	ChildB1   OptBool   `json:"childB1"`
	ChildStr1 OptString `json:"childStr1"`
}

// GetChildB1 returns the value of ChildB1.
func (s *ChildModel1) GetChildB1() OptBool {
	return s.ChildB1
}

// GetChildStr1 returns the value of ChildStr1.
func (s *ChildModel1) GetChildStr1() OptString {
	return s.ChildStr1
}

// SetChildB1 sets the value of ChildB1.
func (s *ChildModel1) SetChildB1(val OptBool) {
	s.ChildB1 = val
}

// SetChildStr1 sets the value of ChildStr1.
func (s *ChildModel1) SetChildStr1(val OptString) {
	s.ChildStr1 = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChildModel1 returns new OptChildModel1 with value set to v.
func NewOptChildModel1(v ChildModel1) OptChildModel1 {
	return OptChildModel1{
		Value: v,
		Set:   true,
	}
}

// OptChildModel1 is optional ChildModel1.
type OptChildModel1 struct {
	Value ChildModel1
	Set   bool
}

// IsSet returns true if OptChildModel1 was set.
func (o OptChildModel1) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChildModel1) Reset() {
	var v ChildModel1
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChildModel1) SetTo(v ChildModel1) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChildModel1) Get() (v ChildModel1, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChildModel1) Or(d ChildModel1) ChildModel1 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestEnum returns new OptTestEnum with value set to v.
func NewOptTestEnum(v TestEnum) OptTestEnum {
	return OptTestEnum{
		Value: v,
		Set:   true,
	}
}

// OptTestEnum is optional TestEnum.
type OptTestEnum struct {
	Value TestEnum
	Set   bool
}

// IsSet returns true if OptTestEnum was set.
func (o OptTestEnum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestEnum) Reset() {
	var v TestEnum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestEnum) SetTo(v TestEnum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestEnum) Get() (v TestEnum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestEnum) Or(d TestEnum) TestEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModel returns new OptTestModel with value set to v.
func NewOptTestModel(v TestModel) OptTestModel {
	return OptTestModel{
		Value: v,
		Set:   true,
	}
}

// OptTestModel is optional TestModel.
type OptTestModel struct {
	Value TestModel
	Set   bool
}

// IsSet returns true if OptTestModel was set.
func (o OptTestModel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModel) Reset() {
	var v TestModel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModel) SetTo(v TestModel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModel) Get() (v TestModel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModel) Or(d TestModel) TestModel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModelCategory returns new OptTestModelCategory with value set to v.
func NewOptTestModelCategory(v TestModelCategory) OptTestModelCategory {
	return OptTestModelCategory{
		Value: v,
		Set:   true,
	}
}

// OptTestModelCategory is optional TestModelCategory.
type OptTestModelCategory struct {
	Value TestModelCategory
	Set   bool
}

// IsSet returns true if OptTestModelCategory was set.
func (o OptTestModelCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModelCategory) Reset() {
	var v TestModelCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModelCategory) SetTo(v TestModelCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModelCategory) Get() (v TestModelCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModelCategory) Or(d TestModelCategory) TestModelCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModelChildStrMap returns new OptTestModelChildStrMap with value set to v.
func NewOptTestModelChildStrMap(v TestModelChildStrMap) OptTestModelChildStrMap {
	return OptTestModelChildStrMap{
		Value: v,
		Set:   true,
	}
}

// OptTestModelChildStrMap is optional TestModelChildStrMap.
type OptTestModelChildStrMap struct {
	Value TestModelChildStrMap
	Set   bool
}

// IsSet returns true if OptTestModelChildStrMap was set.
func (o OptTestModelChildStrMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModelChildStrMap) Reset() {
	var v TestModelChildStrMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModelChildStrMap) SetTo(v TestModelChildStrMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModelChildStrMap) Get() (v TestModelChildStrMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModelChildStrMap) Or(d TestModelChildStrMap) TestModelChildStrMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModelNestedChild returns new OptTestModelNestedChild with value set to v.
func NewOptTestModelNestedChild(v TestModelNestedChild) OptTestModelNestedChild {
	return OptTestModelNestedChild{
		Value: v,
		Set:   true,
	}
}

// OptTestModelNestedChild is optional TestModelNestedChild.
type OptTestModelNestedChild struct {
	Value TestModelNestedChild
	Set   bool
}

// IsSet returns true if OptTestModelNestedChild was set.
func (o OptTestModelNestedChild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModelNestedChild) Reset() {
	var v TestModelNestedChild
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModelNestedChild) SetTo(v TestModelNestedChild) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModelNestedChild) Get() (v TestModelNestedChild, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModelNestedChild) Or(d TestModelNestedChild) TestModelNestedChild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModelStrToIntMap returns new OptTestModelStrToIntMap with value set to v.
func NewOptTestModelStrToIntMap(v TestModelStrToIntMap) OptTestModelStrToIntMap {
	return OptTestModelStrToIntMap{
		Value: v,
		Set:   true,
	}
}

// OptTestModelStrToIntMap is optional TestModelStrToIntMap.
type OptTestModelStrToIntMap struct {
	Value TestModelStrToIntMap
	Set   bool
}

// IsSet returns true if OptTestModelStrToIntMap was set.
func (o OptTestModelStrToIntMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModelStrToIntMap) Reset() {
	var v TestModelStrToIntMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModelStrToIntMap) SetTo(v TestModelStrToIntMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModelStrToIntMap) Get() (v TestModelStrToIntMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModelStrToIntMap) Or(d TestModelStrToIntMap) TestModelStrToIntMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestModelStrToStrMap returns new OptTestModelStrToStrMap with value set to v.
func NewOptTestModelStrToStrMap(v TestModelStrToStrMap) OptTestModelStrToStrMap {
	return OptTestModelStrToStrMap{
		Value: v,
		Set:   true,
	}
}

// OptTestModelStrToStrMap is optional TestModelStrToStrMap.
type OptTestModelStrToStrMap struct {
	Value TestModelStrToStrMap
	Set   bool
}

// IsSet returns true if OptTestModelStrToStrMap was set.
func (o OptTestModelStrToStrMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestModelStrToStrMap) Reset() {
	var v TestModelStrToStrMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestModelStrToStrMap) SetTo(v TestModelStrToStrMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestModelStrToStrMap) Get() (v TestModelStrToStrMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestModelStrToStrMap) Or(d TestModelStrToStrMap) TestModelStrToStrMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint32 returns new OptUint32 with value set to v.
func NewOptUint32(v uint32) OptUint32 {
	return OptUint32{
		Value: v,
		Set:   true,
	}
}

// OptUint32 is optional uint32.
type OptUint32 struct {
	Value uint32
	Set   bool
}

// IsSet returns true if OptUint32 was set.
func (o OptUint32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint32) Reset() {
	var v uint32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint32) SetTo(v uint32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint32) Get() (v uint32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint32) Or(d uint32) uint32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint64 returns new OptUint64 with value set to v.
func NewOptUint64(v uint64) OptUint64 {
	return OptUint64{
		Value: v,
		Set:   true,
	}
}

// OptUint64 is optional uint64.
type OptUint64 struct {
	Value uint64
	Set   bool
}

// IsSet returns true if OptUint64 was set.
func (o OptUint64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint64) Reset() {
	var v uint64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint64) SetTo(v uint64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint64) Get() (v uint64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint64) Or(d uint64) uint64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/StringMessage
type StringMessage struct {
	Value OptString `json:"value"`
}

// GetValue returns the value of Value.
func (s *StringMessage) GetValue() OptString {
	return s.Value
}

// SetValue sets the value of Value.
func (s *StringMessage) SetValue(val OptString) {
	s.Value = val
}

// Ref: #/components/schemas/TestEnum
type TestEnum string

const (
	TestEnumDEVICEUNKNOWN  TestEnum = "DEVICE_UNKNOWN"
	TestEnumDEVICEKEYBOARD TestEnum = "DEVICE_KEYBOARD"
	TestEnumDEVICEMOUSE    TestEnum = "DEVICE_MOUSE"
	TestEnumDEVICEMONITOR  TestEnum = "DEVICE_MONITOR"
)

// AllValues returns all TestEnum values.
func (TestEnum) AllValues() []TestEnum {
	return []TestEnum{
		TestEnumDEVICEUNKNOWN,
		TestEnumDEVICEKEYBOARD,
		TestEnumDEVICEMOUSE,
		TestEnumDEVICEMONITOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestEnum) MarshalText() ([]byte, error) {
	switch s {
	case TestEnumDEVICEUNKNOWN:
		return []byte(s), nil
	case TestEnumDEVICEKEYBOARD:
		return []byte(s), nil
	case TestEnumDEVICEMOUSE:
		return []byte(s), nil
	case TestEnumDEVICEMONITOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestEnum) UnmarshalText(data []byte) error {
	switch TestEnum(data) {
	case TestEnumDEVICEUNKNOWN:
		*s = TestEnumDEVICEUNKNOWN
		return nil
	case TestEnumDEVICEKEYBOARD:
		*s = TestEnumDEVICEKEYBOARD
		return nil
	case TestEnumDEVICEMOUSE:
		*s = TestEnumDEVICEMOUSE
		return nil
	case TestEnumDEVICEMONITOR:
		*s = TestEnumDEVICEMONITOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TestModel
type TestModel struct {
	Value            OptInt32                `json:"value"`
	ValueArray       []int32                 `json:"valueArray"`
	ValueDeprec      []int32                 `json:"valueDeprec"`
	Str1             OptString               `json:"str1"`
	B1               OptBool                 `json:"b1"`
	B2               OptBool                 `json:"b2"`
	Str2             OptString               `json:"str2"`
	Str3             OptString               `json:"str3"`
	OptionalFloat    OptFloat32              `json:"optionalFloat"`
	OptionalDouble   OptFloat64              `json:"optionalDouble"`
	OptionalInt64    OptInt64                `json:"optionalInt64"`
	OptionalUint32   OptUint32               `json:"optionalUint32"`
	OptionalUint64   OptUint64               `json:"optionalUint64"`
	OptionalSint32   OptInt32                `json:"optionalSint32"`
	OptionalSint64   OptInt64                `json:"optionalSint64"`
	OptionalFixed32  OptUint32               `json:"optionalFixed32"`
	OptionalFixed64  OptUint64               `json:"optionalFixed64"`
	OptionalSfixed32 OptInt32                `json:"optionalSfixed32"`
	OptionalSfixed64 OptInt64                `json:"optionalSfixed64"`
	RepeatedInt64    []int64                 `json:"repeatedInt64"`
	RepeatedUint64   []uint64                `json:"repeatedUint64"`
	RepeatedFixed64  []uint64                `json:"repeatedFixed64"`
	RepeatedSfixed64 []int64                 `json:"repeatedSfixed64"`
	RepeatedBool     []bool                  `json:"repeatedBool"`
	RepeatedString   []string                `json:"repeatedString"`
	NestedChild1     OptTestModelNestedChild `json:"nestedChild1"`
	ChildModel1      OptChildModel1          `json:"childModel1"`
	ChildModel2      []ChildModel1           `json:"childModel2"`
	Bar              OptChildModel1          `json:"bar"`
	OneofMember1     OptString               `json:"oneofMember1"`
	OneofMember2     OptBool                 `json:"oneofMember2"`
	RecursiveChild   *TestModel              `json:"recursiveChild"`
	ChildStrMap      OptTestModelChildStrMap `json:"childStrMap"`
	StrToIntMap      OptTestModelStrToIntMap `json:"strToIntMap"`
	StrToStrMap      OptTestModelStrToStrMap `json:"strToStrMap"`
	Category         OptTestModelCategory    `json:"category"`
	String           OptString               `json:"string"`
	Int64            OptInt64                `json:"int64"`
	Double           OptFloat64              `json:"double"`
	Template         OptString               `json:"template"`
	Msg              OptString               `json:"msg"`
	Arena            OptString               `json:"arena"`
	ImportedEnum     OptTestEnum             `json:"importedEnum"`
	Phase            OptString               `json:"phase"`
	ClearPhase       OptBool                 `json:"clearPhase"`
}

// GetValue returns the value of Value.
func (s *TestModel) GetValue() OptInt32 {
	return s.Value
}

// GetValueArray returns the value of ValueArray.
func (s *TestModel) GetValueArray() []int32 {
	return s.ValueArray
}

// GetValueDeprec returns the value of ValueDeprec.
func (s *TestModel) GetValueDeprec() []int32 {
	return s.ValueDeprec
}

// GetStr1 returns the value of Str1.
func (s *TestModel) GetStr1() OptString {
	return s.Str1
}

// GetB1 returns the value of B1.
func (s *TestModel) GetB1() OptBool {
	return s.B1
}

// GetB2 returns the value of B2.
func (s *TestModel) GetB2() OptBool {
	return s.B2
}

// GetStr2 returns the value of Str2.
func (s *TestModel) GetStr2() OptString {
	return s.Str2
}

// GetStr3 returns the value of Str3.
func (s *TestModel) GetStr3() OptString {
	return s.Str3
}

// GetOptionalFloat returns the value of OptionalFloat.
func (s *TestModel) GetOptionalFloat() OptFloat32 {
	return s.OptionalFloat
}

// GetOptionalDouble returns the value of OptionalDouble.
func (s *TestModel) GetOptionalDouble() OptFloat64 {
	return s.OptionalDouble
}

// GetOptionalInt64 returns the value of OptionalInt64.
func (s *TestModel) GetOptionalInt64() OptInt64 {
	return s.OptionalInt64
}

// GetOptionalUint32 returns the value of OptionalUint32.
func (s *TestModel) GetOptionalUint32() OptUint32 {
	return s.OptionalUint32
}

// GetOptionalUint64 returns the value of OptionalUint64.
func (s *TestModel) GetOptionalUint64() OptUint64 {
	return s.OptionalUint64
}

// GetOptionalSint32 returns the value of OptionalSint32.
func (s *TestModel) GetOptionalSint32() OptInt32 {
	return s.OptionalSint32
}

// GetOptionalSint64 returns the value of OptionalSint64.
func (s *TestModel) GetOptionalSint64() OptInt64 {
	return s.OptionalSint64
}

// GetOptionalFixed32 returns the value of OptionalFixed32.
func (s *TestModel) GetOptionalFixed32() OptUint32 {
	return s.OptionalFixed32
}

// GetOptionalFixed64 returns the value of OptionalFixed64.
func (s *TestModel) GetOptionalFixed64() OptUint64 {
	return s.OptionalFixed64
}

// GetOptionalSfixed32 returns the value of OptionalSfixed32.
func (s *TestModel) GetOptionalSfixed32() OptInt32 {
	return s.OptionalSfixed32
}

// GetOptionalSfixed64 returns the value of OptionalSfixed64.
func (s *TestModel) GetOptionalSfixed64() OptInt64 {
	return s.OptionalSfixed64
}

// GetRepeatedInt64 returns the value of RepeatedInt64.
func (s *TestModel) GetRepeatedInt64() []int64 {
	return s.RepeatedInt64
}

// GetRepeatedUint64 returns the value of RepeatedUint64.
func (s *TestModel) GetRepeatedUint64() []uint64 {
	return s.RepeatedUint64
}

// GetRepeatedFixed64 returns the value of RepeatedFixed64.
func (s *TestModel) GetRepeatedFixed64() []uint64 {
	return s.RepeatedFixed64
}

// GetRepeatedSfixed64 returns the value of RepeatedSfixed64.
func (s *TestModel) GetRepeatedSfixed64() []int64 {
	return s.RepeatedSfixed64
}

// GetRepeatedBool returns the value of RepeatedBool.
func (s *TestModel) GetRepeatedBool() []bool {
	return s.RepeatedBool
}

// GetRepeatedString returns the value of RepeatedString.
func (s *TestModel) GetRepeatedString() []string {
	return s.RepeatedString
}

// GetNestedChild1 returns the value of NestedChild1.
func (s *TestModel) GetNestedChild1() OptTestModelNestedChild {
	return s.NestedChild1
}

// GetChildModel1 returns the value of ChildModel1.
func (s *TestModel) GetChildModel1() OptChildModel1 {
	return s.ChildModel1
}

// GetChildModel2 returns the value of ChildModel2.
func (s *TestModel) GetChildModel2() []ChildModel1 {
	return s.ChildModel2
}

// GetBar returns the value of Bar.
func (s *TestModel) GetBar() OptChildModel1 {
	return s.Bar
}

// GetOneofMember1 returns the value of OneofMember1.
func (s *TestModel) GetOneofMember1() OptString {
	return s.OneofMember1
}

// GetOneofMember2 returns the value of OneofMember2.
func (s *TestModel) GetOneofMember2() OptBool {
	return s.OneofMember2
}

// GetRecursiveChild returns the value of RecursiveChild.
func (s *TestModel) GetRecursiveChild() *TestModel {
	return s.RecursiveChild
}

// GetChildStrMap returns the value of ChildStrMap.
func (s *TestModel) GetChildStrMap() OptTestModelChildStrMap {
	return s.ChildStrMap
}

// GetStrToIntMap returns the value of StrToIntMap.
func (s *TestModel) GetStrToIntMap() OptTestModelStrToIntMap {
	return s.StrToIntMap
}

// GetStrToStrMap returns the value of StrToStrMap.
func (s *TestModel) GetStrToStrMap() OptTestModelStrToStrMap {
	return s.StrToStrMap
}

// GetCategory returns the value of Category.
func (s *TestModel) GetCategory() OptTestModelCategory {
	return s.Category
}

// GetString returns the value of String.
func (s *TestModel) GetString() OptString {
	return s.String
}

// GetInt64 returns the value of Int64.
func (s *TestModel) GetInt64() OptInt64 {
	return s.Int64
}

// GetDouble returns the value of Double.
func (s *TestModel) GetDouble() OptFloat64 {
	return s.Double
}

// GetTemplate returns the value of Template.
func (s *TestModel) GetTemplate() OptString {
	return s.Template
}

// GetMsg returns the value of Msg.
func (s *TestModel) GetMsg() OptString {
	return s.Msg
}

// GetArena returns the value of Arena.
func (s *TestModel) GetArena() OptString {
	return s.Arena
}

// GetImportedEnum returns the value of ImportedEnum.
func (s *TestModel) GetImportedEnum() OptTestEnum {
	return s.ImportedEnum
}

// GetPhase returns the value of Phase.
func (s *TestModel) GetPhase() OptString {
	return s.Phase
}

// GetClearPhase returns the value of ClearPhase.
func (s *TestModel) GetClearPhase() OptBool {
	return s.ClearPhase
}

// SetValue sets the value of Value.
func (s *TestModel) SetValue(val OptInt32) {
	s.Value = val
}

// SetValueArray sets the value of ValueArray.
func (s *TestModel) SetValueArray(val []int32) {
	s.ValueArray = val
}

// SetValueDeprec sets the value of ValueDeprec.
func (s *TestModel) SetValueDeprec(val []int32) {
	s.ValueDeprec = val
}

// SetStr1 sets the value of Str1.
func (s *TestModel) SetStr1(val OptString) {
	s.Str1 = val
}

// SetB1 sets the value of B1.
func (s *TestModel) SetB1(val OptBool) {
	s.B1 = val
}

// SetB2 sets the value of B2.
func (s *TestModel) SetB2(val OptBool) {
	s.B2 = val
}

// SetStr2 sets the value of Str2.
func (s *TestModel) SetStr2(val OptString) {
	s.Str2 = val
}

// SetStr3 sets the value of Str3.
func (s *TestModel) SetStr3(val OptString) {
	s.Str3 = val
}

// SetOptionalFloat sets the value of OptionalFloat.
func (s *TestModel) SetOptionalFloat(val OptFloat32) {
	s.OptionalFloat = val
}

// SetOptionalDouble sets the value of OptionalDouble.
func (s *TestModel) SetOptionalDouble(val OptFloat64) {
	s.OptionalDouble = val
}

// SetOptionalInt64 sets the value of OptionalInt64.
func (s *TestModel) SetOptionalInt64(val OptInt64) {
	s.OptionalInt64 = val
}

// SetOptionalUint32 sets the value of OptionalUint32.
func (s *TestModel) SetOptionalUint32(val OptUint32) {
	s.OptionalUint32 = val
}

// SetOptionalUint64 sets the value of OptionalUint64.
func (s *TestModel) SetOptionalUint64(val OptUint64) {
	s.OptionalUint64 = val
}

// SetOptionalSint32 sets the value of OptionalSint32.
func (s *TestModel) SetOptionalSint32(val OptInt32) {
	s.OptionalSint32 = val
}

// SetOptionalSint64 sets the value of OptionalSint64.
func (s *TestModel) SetOptionalSint64(val OptInt64) {
	s.OptionalSint64 = val
}

// SetOptionalFixed32 sets the value of OptionalFixed32.
func (s *TestModel) SetOptionalFixed32(val OptUint32) {
	s.OptionalFixed32 = val
}

// SetOptionalFixed64 sets the value of OptionalFixed64.
func (s *TestModel) SetOptionalFixed64(val OptUint64) {
	s.OptionalFixed64 = val
}

// SetOptionalSfixed32 sets the value of OptionalSfixed32.
func (s *TestModel) SetOptionalSfixed32(val OptInt32) {
	s.OptionalSfixed32 = val
}

// SetOptionalSfixed64 sets the value of OptionalSfixed64.
func (s *TestModel) SetOptionalSfixed64(val OptInt64) {
	s.OptionalSfixed64 = val
}

// SetRepeatedInt64 sets the value of RepeatedInt64.
func (s *TestModel) SetRepeatedInt64(val []int64) {
	s.RepeatedInt64 = val
}

// SetRepeatedUint64 sets the value of RepeatedUint64.
func (s *TestModel) SetRepeatedUint64(val []uint64) {
	s.RepeatedUint64 = val
}

// SetRepeatedFixed64 sets the value of RepeatedFixed64.
func (s *TestModel) SetRepeatedFixed64(val []uint64) {
	s.RepeatedFixed64 = val
}

// SetRepeatedSfixed64 sets the value of RepeatedSfixed64.
func (s *TestModel) SetRepeatedSfixed64(val []int64) {
	s.RepeatedSfixed64 = val
}

// SetRepeatedBool sets the value of RepeatedBool.
func (s *TestModel) SetRepeatedBool(val []bool) {
	s.RepeatedBool = val
}

// SetRepeatedString sets the value of RepeatedString.
func (s *TestModel) SetRepeatedString(val []string) {
	s.RepeatedString = val
}

// SetNestedChild1 sets the value of NestedChild1.
func (s *TestModel) SetNestedChild1(val OptTestModelNestedChild) {
	s.NestedChild1 = val
}

// SetChildModel1 sets the value of ChildModel1.
func (s *TestModel) SetChildModel1(val OptChildModel1) {
	s.ChildModel1 = val
}

// SetChildModel2 sets the value of ChildModel2.
func (s *TestModel) SetChildModel2(val []ChildModel1) {
	s.ChildModel2 = val
}

// SetBar sets the value of Bar.
func (s *TestModel) SetBar(val OptChildModel1) {
	s.Bar = val
}

// SetOneofMember1 sets the value of OneofMember1.
func (s *TestModel) SetOneofMember1(val OptString) {
	s.OneofMember1 = val
}

// SetOneofMember2 sets the value of OneofMember2.
func (s *TestModel) SetOneofMember2(val OptBool) {
	s.OneofMember2 = val
}

// SetRecursiveChild sets the value of RecursiveChild.
func (s *TestModel) SetRecursiveChild(val *TestModel) {
	s.RecursiveChild = val
}

// SetChildStrMap sets the value of ChildStrMap.
func (s *TestModel) SetChildStrMap(val OptTestModelChildStrMap) {
	s.ChildStrMap = val
}

// SetStrToIntMap sets the value of StrToIntMap.
func (s *TestModel) SetStrToIntMap(val OptTestModelStrToIntMap) {
	s.StrToIntMap = val
}

// SetStrToStrMap sets the value of StrToStrMap.
func (s *TestModel) SetStrToStrMap(val OptTestModelStrToStrMap) {
	s.StrToStrMap = val
}

// SetCategory sets the value of Category.
func (s *TestModel) SetCategory(val OptTestModelCategory) {
	s.Category = val
}

// SetString sets the value of String.
func (s *TestModel) SetString(val OptString) {
	s.String = val
}

// SetInt64 sets the value of Int64.
func (s *TestModel) SetInt64(val OptInt64) {
	s.Int64 = val
}

// SetDouble sets the value of Double.
func (s *TestModel) SetDouble(val OptFloat64) {
	s.Double = val
}

// SetTemplate sets the value of Template.
func (s *TestModel) SetTemplate(val OptString) {
	s.Template = val
}

// SetMsg sets the value of Msg.
func (s *TestModel) SetMsg(val OptString) {
	s.Msg = val
}

// SetArena sets the value of Arena.
func (s *TestModel) SetArena(val OptString) {
	s.Arena = val
}

// SetImportedEnum sets the value of ImportedEnum.
func (s *TestModel) SetImportedEnum(val OptTestEnum) {
	s.ImportedEnum = val
}

// SetPhase sets the value of Phase.
func (s *TestModel) SetPhase(val OptString) {
	s.Phase = val
}

// SetClearPhase sets the value of ClearPhase.
func (s *TestModel) SetClearPhase(val OptBool) {
	s.ClearPhase = val
}

// Ref: #/components/schemas/TestModel.Category
type TestModelCategory string

const (
	TestModelCategoryUNKNOWN TestModelCategory = "UNKNOWN"
	TestModelCategoryIMAGES  TestModelCategory = "IMAGES"
	TestModelCategoryNEWS    TestModelCategory = "NEWS"
	TestModelCategoryVIDEO   TestModelCategory = "VIDEO"
	TestModelCategoryRADIO   TestModelCategory = "RADIO"
)

// AllValues returns all TestModelCategory values.
func (TestModelCategory) AllValues() []TestModelCategory {
	return []TestModelCategory{
		TestModelCategoryUNKNOWN,
		TestModelCategoryIMAGES,
		TestModelCategoryNEWS,
		TestModelCategoryVIDEO,
		TestModelCategoryRADIO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TestModelCategory) MarshalText() ([]byte, error) {
	switch s {
	case TestModelCategoryUNKNOWN:
		return []byte(s), nil
	case TestModelCategoryIMAGES:
		return []byte(s), nil
	case TestModelCategoryNEWS:
		return []byte(s), nil
	case TestModelCategoryVIDEO:
		return []byte(s), nil
	case TestModelCategoryRADIO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TestModelCategory) UnmarshalText(data []byte) error {
	switch TestModelCategory(data) {
	case TestModelCategoryUNKNOWN:
		*s = TestModelCategoryUNKNOWN
		return nil
	case TestModelCategoryIMAGES:
		*s = TestModelCategoryIMAGES
		return nil
	case TestModelCategoryNEWS:
		*s = TestModelCategoryNEWS
		return nil
	case TestModelCategoryVIDEO:
		*s = TestModelCategoryVIDEO
		return nil
	case TestModelCategoryRADIO:
		*s = TestModelCategoryRADIO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TestModelChildStrMap map[string]ChildModel1

func (s *TestModelChildStrMap) init() TestModelChildStrMap {
	m := *s
	if m == nil {
		m = map[string]ChildModel1{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/TestModel.NestedChild
type TestModelNestedChild struct {
	NestedChildName OptString `json:"nestedChildName"`
}

// GetNestedChildName returns the value of NestedChildName.
func (s *TestModelNestedChild) GetNestedChildName() OptString {
	return s.NestedChildName
}

// SetNestedChildName sets the value of NestedChildName.
func (s *TestModelNestedChild) SetNestedChildName(val OptString) {
	s.NestedChildName = val
}

type TestModelStrToIntMap map[string]int32

func (s *TestModelStrToIntMap) init() TestModelStrToIntMap {
	m := *s
	if m == nil {
		m = map[string]int32{}
		*s = m
	}
	return m
}

type TestModelStrToStrMap map[string]string

func (s *TestModelStrToStrMap) init() TestModelStrToStrMap {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}
