// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s TestEnum) Validate() error {
	switch s {
	case "DEVICE_UNKNOWN":
		return nil
	case "DEVICE_KEYBOARD":
		return nil
	case "DEVICE_MOUSE":
		return nil
	case "DEVICE_MONITOR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TestModel) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.OptionalFloat.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optionalFloat",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OptionalDouble.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optionalDouble",
			Error: err,
		})
	}
	if err := func() error {
		if s.RecursiveChild == nil {
			return nil // optional
		}
		if err := func() error {
			if err := s.RecursiveChild.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recursiveChild",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Category.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Double.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "double",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ImportedEnum.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "importedEnum",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TestModelCategory) Validate() error {
	switch s {
	case "UNKNOWN":
		return nil
	case "IMAGES":
		return nil
	case "NEWS":
		return nil
	case "VIDEO":
		return nil
	case "RADIO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
