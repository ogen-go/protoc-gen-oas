// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.25.2
// source: proxy.proto

package proxypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_DEVICE_UNKNOWN  TestEnum = 0
	TestEnum_DEVICE_KEYBOARD TestEnum = 1
	TestEnum_DEVICE_MOUSE    TestEnum = 2
	TestEnum_DEVICE_MONITOR  TestEnum = 3
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "DEVICE_UNKNOWN",
		1: "DEVICE_KEYBOARD",
		2: "DEVICE_MOUSE",
		3: "DEVICE_MONITOR",
	}
	TestEnum_value = map[string]int32{
		"DEVICE_UNKNOWN":  0,
		"DEVICE_KEYBOARD": 1,
		"DEVICE_MOUSE":    2,
		"DEVICE_MONITOR":  3,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proxy_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_proxy_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{0}
}

type TestModel_Category int32

const (
	TestModel_UNKNOWN TestModel_Category = 0
	TestModel_IMAGES  TestModel_Category = 5
	TestModel_NEWS    TestModel_Category = 6
	TestModel_VIDEO   TestModel_Category = 7
	// Deprecated: Marked as deprecated in proxy.proto.
	TestModel_RADIO TestModel_Category = 8
)

// Enum value maps for TestModel_Category.
var (
	TestModel_Category_name = map[int32]string{
		0: "UNKNOWN",
		5: "IMAGES",
		6: "NEWS",
		7: "VIDEO",
		8: "RADIO",
	}
	TestModel_Category_value = map[string]int32{
		"UNKNOWN": 0,
		"IMAGES":  5,
		"NEWS":    6,
		"VIDEO":   7,
		"RADIO":   8,
	}
)

func (x TestModel_Category) Enum() *TestModel_Category {
	p := new(TestModel_Category)
	*p = x
	return p
}

func (x TestModel_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestModel_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_proxy_proto_enumTypes[1].Descriptor()
}

func (TestModel_Category) Type() protoreflect.EnumType {
	return &file_proxy_proto_enumTypes[1]
}

func (x TestModel_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestModel_Category.Descriptor instead.
func (TestModel_Category) EnumDescriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{2, 0}
}

type ChildModel1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildB1   *bool   `protobuf:"varint,44,opt,name=child_b1,json=childB1,proto3,oneof" json:"child_b1,omitempty"`
	ChildStr1 *string `protobuf:"bytes,56,opt,name=child_str1,json=childStr1,proto3,oneof" json:"child_str1,omitempty"`
}

func (x *ChildModel1) Reset() {
	*x = ChildModel1{}
	mi := &file_proxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildModel1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildModel1) ProtoMessage() {}

func (x *ChildModel1) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildModel1.ProtoReflect.Descriptor instead.
func (*ChildModel1) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *ChildModel1) GetChildB1() bool {
	if x != nil && x.ChildB1 != nil {
		return *x.ChildB1
	}
	return false
}

func (x *ChildModel1) GetChildStr1() string {
	if x != nil && x.ChildStr1 != nil {
		return *x.ChildStr1
	}
	return ""
}

type ChildModel3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubKey  string  `protobuf:"bytes,1,opt,name=sub_key,json=subKey,proto3" json:"sub_key,omitempty"`
	Bool1   bool    `protobuf:"varint,2,opt,name=bool1,proto3" json:"bool1,omitempty"`
	I32     int32   `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	OptStr  *string `protobuf:"bytes,4,opt,name=opt_str,json=optStr,proto3,oneof" json:"opt_str,omitempty"`
	OptBool *bool   `protobuf:"varint,5,opt,name=opt_bool,json=optBool,proto3,oneof" json:"opt_bool,omitempty"`
	OptI32  *int32  `protobuf:"varint,6,opt,name=opt_i32,json=optI32,proto3,oneof" json:"opt_i32,omitempty"`
}

func (x *ChildModel3) Reset() {
	*x = ChildModel3{}
	mi := &file_proxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildModel3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildModel3) ProtoMessage() {}

func (x *ChildModel3) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildModel3.ProtoReflect.Descriptor instead.
func (*ChildModel3) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *ChildModel3) GetSubKey() string {
	if x != nil {
		return x.SubKey
	}
	return ""
}

func (x *ChildModel3) GetBool1() bool {
	if x != nil {
		return x.Bool1
	}
	return false
}

func (x *ChildModel3) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *ChildModel3) GetOptStr() string {
	if x != nil && x.OptStr != nil {
		return *x.OptStr
	}
	return ""
}

func (x *ChildModel3) GetOptBool() bool {
	if x != nil && x.OptBool != nil {
		return *x.OptBool
	}
	return false
}

func (x *ChildModel3) GetOptI32() int32 {
	if x != nil && x.OptI32 != nil {
		return *x.OptI32
	}
	return 0
}

type TestModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *int32  `protobuf:"varint,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	ValueArray []int32 `protobuf:"varint,2,rep,packed,name=value_array,json=valueArray,proto3" json:"value_array,omitempty"` // _UPB_MODE_ARRAY
	// Deprecated: Marked as deprecated in proxy.proto.
	ValueDeprec      []int32                `protobuf:"varint,4,rep,packed,name=value_deprec,json=valueDeprec,proto3" json:"value_deprec,omitempty"`
	Str1             *string                `protobuf:"bytes,115,opt,name=str1,proto3,oneof" json:"str1,omitempty"`
	B1               *bool                  `protobuf:"varint,9,opt,name=b1,proto3,oneof" json:"b1,omitempty"`
	B2               *bool                  `protobuf:"varint,10,opt,name=b2,proto3,oneof" json:"b2,omitempty"`
	Str2             *string                `protobuf:"bytes,50,opt,name=str2,proto3,oneof" json:"str2,omitempty"`
	Str3             *string                `protobuf:"bytes,11,opt,name=str3,proto3,oneof" json:"str3,omitempty"`
	OptionalFloat    *float32               `protobuf:"fixed32,14,opt,name=optional_float,json=optionalFloat,proto3,oneof" json:"optional_float,omitempty"`
	OptionalDouble   *float64               `protobuf:"fixed64,15,opt,name=optional_double,json=optionalDouble,proto3,oneof" json:"optional_double,omitempty"`
	OptionalInt64    *int64                 `protobuf:"varint,16,opt,name=optional_int64,json=optionalInt64,proto3,oneof" json:"optional_int64,omitempty"`
	OptionalUint32   *uint32                `protobuf:"varint,17,opt,name=optional_uint32,json=optionalUint32,proto3,oneof" json:"optional_uint32,omitempty"`
	OptionalUint64   *uint64                `protobuf:"varint,18,opt,name=optional_uint64,json=optionalUint64,proto3,oneof" json:"optional_uint64,omitempty"`
	OptionalSint32   *int32                 `protobuf:"zigzag32,19,opt,name=optional_sint32,json=optionalSint32,proto3,oneof" json:"optional_sint32,omitempty"`
	OptionalSint64   *int64                 `protobuf:"zigzag64,20,opt,name=optional_sint64,json=optionalSint64,proto3,oneof" json:"optional_sint64,omitempty"`
	OptionalFixed32  *uint32                `protobuf:"fixed32,21,opt,name=optional_fixed32,json=optionalFixed32,proto3,oneof" json:"optional_fixed32,omitempty"`
	OptionalFixed64  *uint64                `protobuf:"fixed64,22,opt,name=optional_fixed64,json=optionalFixed64,proto3,oneof" json:"optional_fixed64,omitempty"`
	OptionalSfixed32 *int32                 `protobuf:"fixed32,23,opt,name=optional_sfixed32,json=optionalSfixed32,proto3,oneof" json:"optional_sfixed32,omitempty"`
	OptionalSfixed64 *int64                 `protobuf:"fixed64,24,opt,name=optional_sfixed64,json=optionalSfixed64,proto3,oneof" json:"optional_sfixed64,omitempty"`
	RepeatedInt64    []int64                `protobuf:"varint,25,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedUint64   []uint64               `protobuf:"varint,26,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedFixed64  []uint64               `protobuf:"fixed64,27,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed64 []int64                `protobuf:"fixed64,28,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedBool     []bool                 `protobuf:"varint,29,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedString   []string               `protobuf:"bytes,35,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	NestedChild_1    *TestModel_NestedChild `protobuf:"bytes,212,opt,name=nested_child_1,json=nestedChild1,proto3,oneof" json:"nested_child_1,omitempty"`
	ChildModel_1     *ChildModel1           `protobuf:"bytes,222,opt,name=child_model_1,json=childModel1,proto3,oneof" json:"child_model_1,omitempty"`
	ChildModel_2     []*ChildModel1         `protobuf:"bytes,223,rep,name=child_model_2,json=childModel2,proto3" json:"child_model_2,omitempty"`
	Bar              *ChildModel1           `protobuf:"bytes,224,opt,name=bar,proto3,oneof" json:"bar,omitempty"`
	// Types that are assignable to ChildOneof1:
	//
	//	*TestModel_OneofMember1
	//	*TestModel_OneofMember2
	ChildOneof1    isTestModel_ChildOneof1 `protobuf_oneof:"child_oneof1"`
	RecursiveChild *TestModel              `protobuf:"bytes,226,opt,name=recursive_child,json=recursiveChild,proto3,oneof" json:"recursive_child,omitempty"`
	ChildStrMap    map[string]*ChildModel1 `protobuf:"bytes,227,rep,name=child_str_map,json=childStrMap,proto3" json:"child_str_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StrToIntMap    map[string]int32        `protobuf:"bytes,228,rep,name=str_to_int_map,json=strToIntMap,proto3" json:"str_to_int_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StrToStrMap    map[string]string       `protobuf:"bytes,229,rep,name=str_to_str_map,json=strToStrMap,proto3" json:"str_to_str_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category       *TestModel_Category     `protobuf:"varint,37,opt,name=category,proto3,enum=proxypb.TestModel_Category,oneof" json:"category,omitempty"`
	// keyword collisions (double, template, ...)
	//
	// Types that are assignable to Type:
	//
	//	*TestModel_String_
	//	*TestModel_Int64
	//	*TestModel_Double
	Type     isTestModel_Type `protobuf_oneof:"type"`
	Template *string          `protobuf:"bytes,233,opt,name=template,proto3,oneof" json:"template,omitempty"`
	Msg      *string          `protobuf:"bytes,234,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	Arena    *string          `protobuf:"bytes,235,opt,name=arena,proto3,oneof" json:"arena,omitempty"`
	// Tests publicly imported enum.
	ImportedEnum *TestEnum `protobuf:"varint,238,opt,name=imported_enum,json=importedEnum,proto3,enum=proxypb.TestEnum,oneof" json:"imported_enum,omitempty"`
	Phase        *string   `protobuf:"bytes,239,opt,name=phase,proto3,oneof" json:"phase,omitempty"`
	ClearPhase   *bool     `protobuf:"varint,240,opt,name=clear_phase,json=clearPhase,proto3,oneof" json:"clear_phase,omitempty"`
}

func (x *TestModel) Reset() {
	*x = TestModel{}
	mi := &file_proxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestModel) ProtoMessage() {}

func (x *TestModel) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestModel.ProtoReflect.Descriptor instead.
func (*TestModel) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *TestModel) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *TestModel) GetValueArray() []int32 {
	if x != nil {
		return x.ValueArray
	}
	return nil
}

// Deprecated: Marked as deprecated in proxy.proto.
func (x *TestModel) GetValueDeprec() []int32 {
	if x != nil {
		return x.ValueDeprec
	}
	return nil
}

func (x *TestModel) GetStr1() string {
	if x != nil && x.Str1 != nil {
		return *x.Str1
	}
	return ""
}

func (x *TestModel) GetB1() bool {
	if x != nil && x.B1 != nil {
		return *x.B1
	}
	return false
}

func (x *TestModel) GetB2() bool {
	if x != nil && x.B2 != nil {
		return *x.B2
	}
	return false
}

func (x *TestModel) GetStr2() string {
	if x != nil && x.Str2 != nil {
		return *x.Str2
	}
	return ""
}

func (x *TestModel) GetStr3() string {
	if x != nil && x.Str3 != nil {
		return *x.Str3
	}
	return ""
}

func (x *TestModel) GetOptionalFloat() float32 {
	if x != nil && x.OptionalFloat != nil {
		return *x.OptionalFloat
	}
	return 0
}

func (x *TestModel) GetOptionalDouble() float64 {
	if x != nil && x.OptionalDouble != nil {
		return *x.OptionalDouble
	}
	return 0
}

func (x *TestModel) GetOptionalInt64() int64 {
	if x != nil && x.OptionalInt64 != nil {
		return *x.OptionalInt64
	}
	return 0
}

func (x *TestModel) GetOptionalUint32() uint32 {
	if x != nil && x.OptionalUint32 != nil {
		return *x.OptionalUint32
	}
	return 0
}

func (x *TestModel) GetOptionalUint64() uint64 {
	if x != nil && x.OptionalUint64 != nil {
		return *x.OptionalUint64
	}
	return 0
}

func (x *TestModel) GetOptionalSint32() int32 {
	if x != nil && x.OptionalSint32 != nil {
		return *x.OptionalSint32
	}
	return 0
}

func (x *TestModel) GetOptionalSint64() int64 {
	if x != nil && x.OptionalSint64 != nil {
		return *x.OptionalSint64
	}
	return 0
}

func (x *TestModel) GetOptionalFixed32() uint32 {
	if x != nil && x.OptionalFixed32 != nil {
		return *x.OptionalFixed32
	}
	return 0
}

func (x *TestModel) GetOptionalFixed64() uint64 {
	if x != nil && x.OptionalFixed64 != nil {
		return *x.OptionalFixed64
	}
	return 0
}

func (x *TestModel) GetOptionalSfixed32() int32 {
	if x != nil && x.OptionalSfixed32 != nil {
		return *x.OptionalSfixed32
	}
	return 0
}

func (x *TestModel) GetOptionalSfixed64() int64 {
	if x != nil && x.OptionalSfixed64 != nil {
		return *x.OptionalSfixed64
	}
	return 0
}

func (x *TestModel) GetRepeatedInt64() []int64 {
	if x != nil {
		return x.RepeatedInt64
	}
	return nil
}

func (x *TestModel) GetRepeatedUint64() []uint64 {
	if x != nil {
		return x.RepeatedUint64
	}
	return nil
}

func (x *TestModel) GetRepeatedFixed64() []uint64 {
	if x != nil {
		return x.RepeatedFixed64
	}
	return nil
}

func (x *TestModel) GetRepeatedSfixed64() []int64 {
	if x != nil {
		return x.RepeatedSfixed64
	}
	return nil
}

func (x *TestModel) GetRepeatedBool() []bool {
	if x != nil {
		return x.RepeatedBool
	}
	return nil
}

func (x *TestModel) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *TestModel) GetNestedChild_1() *TestModel_NestedChild {
	if x != nil {
		return x.NestedChild_1
	}
	return nil
}

func (x *TestModel) GetChildModel_1() *ChildModel1 {
	if x != nil {
		return x.ChildModel_1
	}
	return nil
}

func (x *TestModel) GetChildModel_2() []*ChildModel1 {
	if x != nil {
		return x.ChildModel_2
	}
	return nil
}

func (x *TestModel) GetBar() *ChildModel1 {
	if x != nil {
		return x.Bar
	}
	return nil
}

func (m *TestModel) GetChildOneof1() isTestModel_ChildOneof1 {
	if m != nil {
		return m.ChildOneof1
	}
	return nil
}

func (x *TestModel) GetOneofMember1() string {
	if x, ok := x.GetChildOneof1().(*TestModel_OneofMember1); ok {
		return x.OneofMember1
	}
	return ""
}

func (x *TestModel) GetOneofMember2() bool {
	if x, ok := x.GetChildOneof1().(*TestModel_OneofMember2); ok {
		return x.OneofMember2
	}
	return false
}

func (x *TestModel) GetRecursiveChild() *TestModel {
	if x != nil {
		return x.RecursiveChild
	}
	return nil
}

func (x *TestModel) GetChildStrMap() map[string]*ChildModel1 {
	if x != nil {
		return x.ChildStrMap
	}
	return nil
}

func (x *TestModel) GetStrToIntMap() map[string]int32 {
	if x != nil {
		return x.StrToIntMap
	}
	return nil
}

func (x *TestModel) GetStrToStrMap() map[string]string {
	if x != nil {
		return x.StrToStrMap
	}
	return nil
}

func (x *TestModel) GetCategory() TestModel_Category {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return TestModel_UNKNOWN
}

func (m *TestModel) GetType() isTestModel_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TestModel) GetString_() string {
	if x, ok := x.GetType().(*TestModel_String_); ok {
		return x.String_
	}
	return ""
}

func (x *TestModel) GetInt64() int64 {
	if x, ok := x.GetType().(*TestModel_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *TestModel) GetDouble() float64 {
	if x, ok := x.GetType().(*TestModel_Double); ok {
		return x.Double
	}
	return 0
}

func (x *TestModel) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *TestModel) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *TestModel) GetArena() string {
	if x != nil && x.Arena != nil {
		return *x.Arena
	}
	return ""
}

func (x *TestModel) GetImportedEnum() TestEnum {
	if x != nil && x.ImportedEnum != nil {
		return *x.ImportedEnum
	}
	return TestEnum_DEVICE_UNKNOWN
}

func (x *TestModel) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *TestModel) GetClearPhase() bool {
	if x != nil && x.ClearPhase != nil {
		return *x.ClearPhase
	}
	return false
}

type isTestModel_ChildOneof1 interface {
	isTestModel_ChildOneof1()
}

type TestModel_OneofMember1 struct {
	OneofMember1 string `protobuf:"bytes,98,opt,name=oneof_member1,json=oneofMember1,proto3,oneof"`
}

type TestModel_OneofMember2 struct {
	OneofMember2 bool `protobuf:"varint,99,opt,name=oneof_member2,json=oneofMember2,proto3,oneof"`
}

func (*TestModel_OneofMember1) isTestModel_ChildOneof1() {}

func (*TestModel_OneofMember2) isTestModel_ChildOneof1() {}

type isTestModel_Type interface {
	isTestModel_Type()
}

type TestModel_String_ struct {
	String_ string `protobuf:"bytes,230,opt,name=string,proto3,oneof"`
}

type TestModel_Int64 struct {
	Int64 int64 `protobuf:"varint,231,opt,name=int64,proto3,oneof"`
}

type TestModel_Double struct {
	Double float64 `protobuf:"fixed64,232,opt,name=double,proto3,oneof"`
}

func (*TestModel_String_) isTestModel_Type() {}

func (*TestModel_Int64) isTestModel_Type() {}

func (*TestModel_Double) isTestModel_Type() {}

type StringMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringMessage) Reset() {
	*x = StringMessage{}
	mi := &file_proxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMessage) ProtoMessage() {}

func (x *StringMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMessage.ProtoReflect.Descriptor instead.
func (*StringMessage) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *StringMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// optional bytes optional_bytes = 36;
type TestModel_NestedChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedChildName *string `protobuf:"bytes,211,opt,name=nested_child_name,json=nestedChildName,proto3,oneof" json:"nested_child_name,omitempty"`
}

func (x *TestModel_NestedChild) Reset() {
	*x = TestModel_NestedChild{}
	mi := &file_proxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestModel_NestedChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestModel_NestedChild) ProtoMessage() {}

func (x *TestModel_NestedChild) ProtoReflect() protoreflect.Message {
	mi := &file_proxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestModel_NestedChild.ProtoReflect.Descriptor instead.
func (*TestModel_NestedChild) Descriptor() ([]byte, []int) {
	return file_proxy_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TestModel_NestedChild) GetNestedChildName() string {
	if x != nil && x.NestedChildName != nil {
		return *x.NestedChildName
	}
	return ""
}

var File_proxy_proto protoreflect.FileDescriptor

var file_proxy_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x31, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x31, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x31, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x72, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x31, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x33, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f,
	0x6c, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x49, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x69, 0x33, 0x32, 0x22, 0xdf, 0x15, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x25, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x72, 0x31, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x73, 0x74, 0x72, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x62, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x02, 0x62,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x02, 0x62, 0x32, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x72,
	0x32, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x73, 0x74, 0x72, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x72, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x04, 0x73, 0x74, 0x72, 0x33, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0c, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x0e, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x0f, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x06, 0x48, 0x10, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0f, 0x48, 0x11, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x10, 0x48, 0x12, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x10, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x31, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x48, 0x13, 0x52, 0x0c,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x31,
	0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x48, 0x14, 0x52,
	0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x32,
	0x18, 0xdf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x52, 0x0b, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x12, 0x2c, 0x0a, 0x03, 0x62, 0x61,
	0x72, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x48, 0x15,
	0x52, 0x03, 0x62, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x12,
	0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x32,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x48, 0x16, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xe3, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x72,
	0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xe4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x49,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x54,
	0x6f, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x17, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe7, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0xea, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x05, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xee, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x1b, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1d, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x55, 0x0a,
	0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x11,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x54, 0x0a, 0x10, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x72,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x05, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x08, 0x1a,
	0x02, 0x08, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x72, 0x31, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x62, 0x31, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x32, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x72, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x72, 0x33, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x31, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x61, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73,
	0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x59,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f,
	0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x32, 0x8a, 0x02, 0x0a, 0x0a, 0x41, 0x50,
	0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x05, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x52, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x22, 0x12, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2f, 0x7b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x61, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x3b,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proxy_proto_rawDescOnce sync.Once
	file_proxy_proto_rawDescData = file_proxy_proto_rawDesc
)

func file_proxy_proto_rawDescGZIP() []byte {
	file_proxy_proto_rawDescOnce.Do(func() {
		file_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_proxy_proto_rawDescData)
	})
	return file_proxy_proto_rawDescData
}

var file_proxy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proxy_proto_goTypes = []any{
	(TestEnum)(0),                 // 0: proxypb.TestEnum
	(TestModel_Category)(0),       // 1: proxypb.TestModel.Category
	(*ChildModel1)(nil),           // 2: proxypb.ChildModel1
	(*ChildModel3)(nil),           // 3: proxypb.ChildModel3
	(*TestModel)(nil),             // 4: proxypb.TestModel
	(*StringMessage)(nil),         // 5: proxypb.StringMessage
	(*TestModel_NestedChild)(nil), // 6: proxypb.TestModel.NestedChild
	nil,                           // 7: proxypb.TestModel.ChildStrMapEntry
	nil,                           // 8: proxypb.TestModel.StrToIntMapEntry
	nil,                           // 9: proxypb.TestModel.StrToStrMapEntry
}
var file_proxy_proto_depIdxs = []int32{
	6,  // 0: proxypb.TestModel.nested_child_1:type_name -> proxypb.TestModel.NestedChild
	2,  // 1: proxypb.TestModel.child_model_1:type_name -> proxypb.ChildModel1
	2,  // 2: proxypb.TestModel.child_model_2:type_name -> proxypb.ChildModel1
	2,  // 3: proxypb.TestModel.bar:type_name -> proxypb.ChildModel1
	4,  // 4: proxypb.TestModel.recursive_child:type_name -> proxypb.TestModel
	7,  // 5: proxypb.TestModel.child_str_map:type_name -> proxypb.TestModel.ChildStrMapEntry
	8,  // 6: proxypb.TestModel.str_to_int_map:type_name -> proxypb.TestModel.StrToIntMapEntry
	9,  // 7: proxypb.TestModel.str_to_str_map:type_name -> proxypb.TestModel.StrToStrMapEntry
	1,  // 8: proxypb.TestModel.category:type_name -> proxypb.TestModel.Category
	0,  // 9: proxypb.TestModel.imported_enum:type_name -> proxypb.TestEnum
	2,  // 10: proxypb.TestModel.ChildStrMapEntry.value:type_name -> proxypb.ChildModel1
	5,  // 11: proxypb.APIService.Echo:input_type -> proxypb.StringMessage
	4,  // 12: proxypb.APIService.TestModelEndpoint:input_type -> proxypb.TestModel
	5,  // 13: proxypb.APIService.PathParam:input_type -> proxypb.StringMessage
	5,  // 14: proxypb.APIService.Echo:output_type -> proxypb.StringMessage
	4,  // 15: proxypb.APIService.TestModelEndpoint:output_type -> proxypb.TestModel
	5,  // 16: proxypb.APIService.PathParam:output_type -> proxypb.StringMessage
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proxy_proto_init() }
func file_proxy_proto_init() {
	if File_proxy_proto != nil {
		return
	}
	file_proxy_proto_msgTypes[0].OneofWrappers = []any{}
	file_proxy_proto_msgTypes[1].OneofWrappers = []any{}
	file_proxy_proto_msgTypes[2].OneofWrappers = []any{
		(*TestModel_OneofMember1)(nil),
		(*TestModel_OneofMember2)(nil),
		(*TestModel_String_)(nil),
		(*TestModel_Int64)(nil),
		(*TestModel_Double)(nil),
	}
	file_proxy_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxy_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proxy_proto_goTypes,
		DependencyIndexes: file_proxy_proto_depIdxs,
		EnumInfos:         file_proxy_proto_enumTypes,
		MessageInfos:      file_proxy_proto_msgTypes,
	}.Build()
	File_proxy_proto = out.File
	file_proxy_proto_rawDesc = nil
	file_proxy_proto_goTypes = nil
	file_proxy_proto_depIdxs = nil
}
